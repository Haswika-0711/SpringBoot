<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>SpringBootRestApplication</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootRestApplication</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>11</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>2.12.0-rc1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework/spring-web -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>3.0.2.RELEASE</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>1.5.8</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.springframework.restdocs</groupId>
						<artifactId>spring-restdocs-asciidoctor</artifactId>
						<version>${spring-restdocs.version}</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>





import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {

        SpringApplication.run(Application.class, args);
    }
}





import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class MyRestService {
    @Autowired
    private RestTemplate myRestTemplate;
    @Value("${myrest.url}")
    private String restUrl;
    public User[] getUsers() {
       var users = myRestTemplate.getForObject(restUrl, User[].class);
        return users;
    }
} 





import com.fasterxml.jackson.annotation.JsonProperty;
public class User {
    private int id;
    private String firstName;
    private String lastName;
    private String email;
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
 public String getFirstName() {
        return firstName;
    }
    @JsonProperty("first_name")
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }



    public String getLastName() {
        return lastName;
    }

    @JsonProperty("last_name")
    public void setLastName(String lastName) {

        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {

        this.email = email;
    }

    @Override
    public String toString() {

        final var sb = new StringBuilder("User{");
        sb.append("id=").append(id);
        sb.append(", firstName='").append(firstName).append('\'');
        sb.append(", lastName='").append(lastName).append('\'');
        sb.append(", email='").append(email).append('\'');
        sb.append('}');
        
        return sb.toString();
    }
} 
    
    
    


Spring Boot RestTemplate tutorial shows how to use RestTemplate to create synchronous HTTP requests in a Spring application.
RestTemplate is a synchronous client to perform HTTP requests. It uses a simple, template method API over underlying HTTP client libraries such as the JDK HttpURLConnection, Apache HttpComponents, and others.

Since Spring 1.5.0, a new client WebClient is available that can be use do create both synchronous and asynchronous requests. In the future releases, RestTemplate will be deprecated in favour of WebClient.
Rest Template is used to create applications that consume RESTful Web Services. You can use the exchange() method to consume the web services for all HTTP methods. The code given below shows how to create Bean for Rest Template to auto wiring the Rest Template object.


    
    


REST stands for REpresentational State Transfer. REST specifies a set of architectural constraints. Any service which satisfies these constraints is called RESTful Service.
The five important constraints for RESTful Web Service are
Client - Server : There should be a service producer and a service consumer.
The interface (URL) is uniform and exposing resources.
The service is stateless.
The service results should be Cacheable. HTTP cache, for example.
Service should assume a Layered architecture. Client should not assume direct connection to server - it might be getting info from a middle layer - cache.







1) What does Spring Boot mean?
2) What are the various Advantages Of Using Spring Boot?
3) What are the various features of Spring Boot?
4) What is the reason to have a spring-boot-maven module?
5) How to make Spring Boot venture utilizing Spring Initializer?
6) What do Dev Tools in Spring boot mean?
7) What does Spring Boot Starter Pom mean? Why Is It Useful?
8) What does Actuator in Spring Boot mean?
9) What Is the Configuration File Name Used By Spring Boot?
10) Why in spring boot “Opinionated ” is used?
11) What are esteem properties of Spring Boot?
12) What Is the Configuration File Name, which is used By Spring Boot?
13) Would we be able to Use Spring Boot with Applications Which Are Not Using Spring?
14) What Is Name Of The Configuration File, Which You Use In Spring Boot?
15) How Might You Implement Spring Security In Spring Boot Application?
16) Would you be able to Control Logging with Spring Boot? How?
17) Differentiate Between An Embedded Container And A War?
18) What does Spring Security mean?
19) What does Aspect-Oriented Programming (AOP) mean?
20) Describe some of the spring sub-projects briefly?
21) Explain the difference between JPA and Hibernate?
22) How to connect to an external database like MSSQL or oracle with Spring boot?
23) How to add custom JS code in Spring Boot?
24) List minimum requirements for Spring boot System?
25) What is Auto Configuration in Spring boot?






https://gofile.io/d/5OMgz3
    
    
    


https://java2blog.com/spring-boot-jdbc-example/
    
    
    
    
    



<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.zetcode</groupId>
    <artifactId>springbootjdbctemplate</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.1.RELEASE</version>
    </parent>

    <dependencies>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.20</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>







package com.training.org;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SpringBootJdbcController {
	@Autowired
	JdbcTemplate jdbcTemplate;
	@RequestMapping("/insert")
	public String insert() {
		System.out.println("Inserting data");
		jdbcTemplate.execute("insert into emp99 values (101,'EShan',10000,'HR'))");
		return "Data inserted ";
		
	}
}






server.port=6060

spring.datasource.url=jdbc:mysql://localhost:3306/springdb  
spring.datasource.username=root  
spring.datasource.password=shital@123  
spring.jpa.hibernate.ddl-auto=create-drop  







package com.training.org;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SpringBootJdbcController {
	@Autowired
	JdbcTemplate jdbcTemplate;
	@RequestMapping("/insert")
	public String insert() {
		jdbcTemplate.execute("insert into emp99(id,name,salary,designation) values (101,'EShan',10000,'HR'))");
		return "Data inserted ";
		
	}
}







package com.training.org;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SpringBootJdbcController {
	@Autowired
	JdbcTemplate jdbcTemplate;
	@RequestMapping("/insert")
	public String insert() {
		jdbcTemplate.execute("insert into emp99(id,name,salary,designation) values (101,'EShan',10000,'HR'))");
		return "Data inserted ";
		
	}
}






// application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/springbootdb  
spring.datasource.username=root  
spring.datasource.password=mysql  
spring.jpa.hibernate.ddl-auto=create-drop  








https://gofile.io/d/FDBPa4
    
    
    


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="ISO-8859-1">
<title>Registration Success</title>
<style type="text/css">
span {
	display: inline-block;
	width: 200px;
	text-align: left;
}
</style>
</head>
<body>
	<div align="center">
		<h2>Registration Succeeded!</h2>
		<span>Full name:</span><span th:text="${user.name}"></span><br /> <span>E-mail:</span><span
			th:text="${user.email}"></span><br /> <span>Password:</span><span
			th:text="${user.password}"></span><br /> <span>Gender:</span><span
			th:text="${user.gender}"></span><br /> <span>Profession:</span><span
			th:text="${user.profession}"></span><br /> <span>Married?</span><span
			th:text="${user.married}"></span><br /> <span>Note:</span><span
			th:text="${user.note}"></span><br />
	</div>
</body>
</html>






<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<meta charset="ISO-8859-1">
<title>User Registration</title>
</head>
<body>
<div align="center">
    <h1>User Registration</h1>
    <form action="#" th:action="@{/register}" method="post" th:object="${user}">
        <label>Full name:</label>
        <input type="text" th:field="*{name}" /><br/>
 
        <label>E-mail:</label>
        <input type="text" th:field="*{email}" /><br/>
 
        <label>Password:</label>
        <input type="password" th:field="*{password}" /><br/>
 
        <label>Birthday (yyyy-mm-dd):</label>
        <input type="text" th:field="*{birthday}" /><br/>
 
        <label>Gender:</label>
        <input type="radio" th:field="*{gender}" value="Male" />Male
        <input type="radio" th:field="*{gender}" value="Female" />Female<br/>
 
        <label>Profession:</label>
        <select th:field="*{profession}">
            <option th:each="p : ${listProfession}" th:value="${p}" th:text="${p}" />
        </select>
        <br/>
 
        <label>Married?</label>
        <input type="checkbox" th:field="*{married}" /><br/>
 
        <label>Note:</label>
        <textarea rows="5" cols="25" th:field="*{note}"></textarea>
        <br/>
 
        <button type="submit">Register</button>    
    </form>
</div>
</body>
</html>




package com.example.demo;

import java.util.Date;

public class User {
	private String name;
	private String email;
	private String password;
	private String gender;
	private String note;

	private boolean married;
	private Date birthday;
	private String profession;
	
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getNote() {
		return note;
	}
	public void setNote(String note) {
		this.note = note;
	}
	public boolean isMarried() {
		return married;
	}
	public void setMarried(boolean married) {
		this.married = married;
	}
	public Date getBirthday() {
		return birthday;
	}
	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}
	public String getProfession() {
		return profession;
	}
	public void setProfession(String profession) {
		this.profession = profession;
	}




}







<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Getting Started: Serving Web Content</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" th:href="style.css" />
</head>
<body>
	<form action="#" th:action="@{/result}" method="post"
		th:object="${form}">
		<p>
			id: <input type="text" th:field="*{id}">
		</p>
		<p>
			Message: <input type="text" th:field="*{message}">
		</p>
		<p>
			<input type="submit">
		</p>
	</form>

</body>
</html>

package com.training.org.SpringBootWebApp;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class WebController {

	private List<String> newNames=Arrays.asList("Tanish","Manish","RAjesh","Anita");
	private static List<Person> perList=new ArrayList<Person>();

	static {
		perList.add(new Person("Anish","Madake"));
		perList.add(new Person("Tanish","Patil"));
	}

	@RequestMapping(value = "/mypage")
	public String index(Model model) {

		return "index";
	}

	@RequestMapping("/greet")
	public String greet(Model model) {
		model.addAttribute("name", "Eshan");
		model.addAttribute("names",newNames);
		return "Greet";
	}

	@RequestMapping("/person")
	public String personDetails(Model model) {
		model.addAttribute("person",perList);
		return "person";
	}

	@RequestMapping("/myform")
	public String getForm() {
		return "MyForm";
	}

	@RequestMapping("/result")
	public String getMyForm(@ModelAttribute MyForm myform, Model model) {
		model.addAttribute("form",myform);
		System.out.println(myform.getMessage());
		model.addAttribute("id",myform.getId());
		model.addAttribute("message",myform.getMessage());
		return "result";

	}

}









<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Getting Started: Serving Web Content</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" th:href="style.css" />
</head>
<body>
	<form action="#" th:action="@{/myform}" method="post"
		th:object="${form}">
		<p>
			id: <input type="text" th:field="*{id}">
		</p>
		<p>
			Message: <input type="text" th:field="*{message}">
		</p>
		<p>
			<input type="submit">
		</p>
	</form>
	a
</body>
</html>



    


package com.training.org.SpringBootWebApp;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class WebController {
	
	private List<String> newNames=Arrays.asList("Tanish","Manish","RAjesh","Anita");
	private static List<Person> perList=new ArrayList<Person>();
	
	static {
		perList.add(new Person("Anish","Madake"));
		perList.add(new Person("Tanish","Patil"));
	}
	
	@RequestMapping(value = "/mypage")
	public String index(Model model) {
		
		return "index";
	}
	
	@RequestMapping("/greet")
	public String greet(Model model) {
		model.addAttribute("name", "Eshan");
		model.addAttribute("names",newNames);
		return "Greet";
	}
	
	@RequestMapping("/person")
	public String personDetails(Model model) {
		model.addAttribute("person",perList);
		return "person";
		
	}
	
	
	@RequestMapping("/myform")
	public String getMyForm(@ModelAttribute MyForm myform, Model model) {
		model.addAttribute("form",myform);
		return "MyForm";
		
	}
	
}








package com.training.org.SpringBootWebApp;

public class MyForm {
	private Long id;
	private String message;
	public MyForm(Long id, String message) {
		super();
		this.id = id;
		this.message = message;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	

}







package com.training.org.SpringBootWebApp;

public class Person {
	private String firstName;
	private String lastName;
	
	
	public Person() {
		super();
	}


	public Person(String firstName, String lastName) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
	}


	public String getFirstName() {
		return firstName;
	}


	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}


	public String getLastName() {
		return lastName;
	}


	public void setLastName(String lastName) {
		this.lastName = lastName;
	}


	@Override
	public String toString() {
		return "Person [firstName=" + firstName + ", lastName=" + lastName + "]";
	}
	
	
	

}



package com.training.org.SpringBootWebApp;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class WebController {
	
	private List<String> newNames=Arrays.asList("Tanish","Manish","RAjesh","Anita");
	private static List<Person> perList=new ArrayList<Person>();
	
	static {
		perList.add(new Person("Anish","Madake"));
		perList.add(new Person("Tanish","Patil"));
	}
	
	@RequestMapping(value = "/mypage")
	public String index(Model model) {
		
		return "index";
	}
	
	@RequestMapping("/greet")
	public String greet(Model model) {
		model.addAttribute("name", "Eshan");
		model.addAttribute("names",newNames);
		return "Greet";
	}
	
	@RequestMapping("/person")
	public String personDetails(Model model) {
		model.addAttribute("person",perList);
		return "person";
		
	}
}





<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
<title>Getting Started: Serving Web Content</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
	<table border="2px">
		<caption>PERSON DETAILS</caption>
		<tr>
			<td>First Name</td>
			<td>Last Name</td>
		</tr>
		<tr th:each="per :${person}">
			<td th:text="${per.firstName}"></td>
			<td th:text="${per.lastName}"></td>
		</tr>
	</table>
</body>
</html>








<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.4.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.training.org</groupId>
	<artifactId>SpringBootWebApp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootWebApp</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>11</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>







package com.training.org.SpringBootWebApp;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class WebController {
	@RequestMapping(value = "/index")
	public String index() {
		return "index";
	}
}




<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Getting Started: Serving Web Content</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
HELLO welcome 
</body>
</html>






package com.training.org.SpringBootWebApp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@SpringBootApplication
public class SpringBootWebAppApplication {
	public static void main(String[] args) {
		SpringApplication.run(SpringBootWebAppApplication.class, args);
	}

}







It works on both web and non-web environments.
Java template engine for HTML5/ XML/ XHTML.
Its high-performance parsed template cache reduces I/O to the minimum.
It can be used as a template engine framework if required.
It supports several template modes: XML, XHTML, and HTML5.
It allows developers to extend and create custom dialect.
It is based on modular features sets called dialects.
It supports internationalization.





Thymeleaf can process six types of templates (also known as Template Mode) are as follows:
XML
Valid XML
XHTML
Valid XHTML
HTML5
Legacy HTML5






The Thymeleaf is an open-source Java library that is licensed under the Apache License 2.0. It is a HTML5/XHTML/XML template engine. It is a server-side Java template engine for both web (servlet-based) and non-web (offline) environments. It is perfect for modern-day HTML5 JVM web development. It provides full integration with Spring Framework.
It applies a set of transformations to template files in order to display data or text produced by the application. It is appropriate for serving XHTML/HTML5 in web applications.
The goal of Thymeleaf is to provide a stylish and well-formed way of creating templates. It is based on XML tags and attributes. These XML tags define the execution of predefined logic on the DOM (Document Object Model) instead of explicitly writing that logic as code inside the template. It is a substitute for JSP.
The architecture of Thymeleaf allows the fast processing of templates that depends on the caching of parsed files. It uses the least possible amount of I/O operations during execution

